pipeline {
    agent any

    parameters {
        string(name: 'DOCKER_TAG', defaultValue: 'latest', description: 'Docker tag')
    }

    tools {
        maven 'maven3'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Git Checkout') {
            steps {
                // Replace with actual Git checkout command
                echo 'Repo URL'
            }
        }

        stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }

        stage('Test') {
            steps {
                sh "mvn test -DskipTests=true"
            }
        }

        stage('File System Scan') {
            steps {
                sh "trivy fs --format table -o fs.html ."
            }
        }

        stage('Sonar Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=bankapp \
                        -Dsonar.projectKey=bankapp \
                        -Dsonar.java.binaries=target
                    '''
                }
            }
        }

        stage('Building & Publish Nexus') {
            steps {
                // Replace with actual withMaven usage
                echo 'withMaven generate (1:29)'
                sh "mvn deploy -DskipTests=true"
            }
        }

        stage('Docker Build & Tag') {
            steps {
                script {
                    // Replace with actual Docker registry binding
                    echo 'with DockerRegistry generate'
                    sh "docker build -t shani877/bankapp:${params.DOCKER_TAG} ."
                }
            }
        }

        stage('Docker Image Scan') {
            steps {
                sh "trivy image --format table -o dimage.html shani877/bankapp:${params.DOCKER_TAG}"
            }
        }

        stage('Docker Push') {
            steps {
                script {
                    // Replace with actual Docker registry binding
                    echo 'with DockerRegistry generate'
                    sh "docker push shani877/bankapp:${params.DOCKER_TAG}"
                }
            }
        }

        stage('Update YAML Manifest in Other Repo') {
            steps {
                script {
                    withCredentials([]) {
                        sh '''
                            # Clone the CD repo
                            git clone url
                            cd Multi-Tier-BankApp-CD/bankapp

                            # List files
                            ls -l bankapp

                            # Get the absolute path for the current directory
                            repo_dir=$(pwd)

                            # Use the absolute path for sed
                            sed -i 's|image: shani877/bankapp:.*|image:shani877/bankapp:'${DOCKER_TAG}'|'${repo_dir}/bankapp/bankapp-ds.yml
                        '''

                        // Confirm the change
                        sh '''
                            echo "Updated YAML file contents:"
                            cat Multi-Tier-BankApp-CD/bankapp/bankapp-ds.yml
                        '''

                        // Configure Git for committing changes and pushing
                        sh '''
                            cd Multi-Tier-BankApp-CD
                            git config user.email "shanujagtap6266@gmail.com"
                            git config user.name "shani877"
                        '''

                        // Commit and push the updated YAML file back to the other repository
                        sh '''
                            cd Multi-Tier-BankApp-CD
                            git add bankapp/bankapp-ds.yml
                            git commit -m "Updated image tag to ${DOCKER_TAG}"
                            git push origin main
                        '''
                    }
                }
            }
        }
    }
}
